[
    {
        "key": "a",
        "command": "explorer.newFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "shift+a",
        "command": "explorer.newFolder",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "r",
        "command": "renameFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "d",
        "command": "deleteFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "y",
        "command": "filesExplorer.copy",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "p",
        "command": "filesExplorer.paste",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "x",
        "command": "filesExplorer.cut",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "f",
        "command": "filesExplorer.findInFolder",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "ctrl+t",
        "command": "workbench.action.terminal.toggleTerminal"
    },
    {
        "key": "tab",
        "command": "search.action.focusSearchList",
        "when": "sideBarFocus && hasSearchResult && activeViewlet == 'workbench.view.search'"
    }, 
    {
        "key": "enter",
        "command": "closeFindWidget",
        "when": "editorFocus && findWidgetVisible"
    },
    {
        "key": "escape",
        "command": "closeFindWidget",
        "when": "editorFocus && findWidgetVisible"
    },
// ----------------------------------------- SPLIT SCREEN NAVIGATION ---------------------------------------------------------------
    {
        "key": "ctrl+h",
        "command": "-editor.action.startFindReplaceAction",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "key": "ctrl+h",
        "command": "workbench.action.focusLeftGroup",
        "when": "editorTextFocus && vim.active && vim.mode != 'Insert'"
    },
    {
        // Special case: when in first editor group (pane), go to sidebar if visible 
        "key": "ctrl+h",
        "command": "workbench.action.focusSideBar",
        "when": "editorTextFocus && vim.active && vim.mode != 'Insert' && activeEditorGroupIndex == 1 && sideBarVisible"
    },
    {
        // Special case: when in side bar or first pane if sidebar is not visible,go to last editor group
        "key": "ctrl+h",
        "command": "workbench.action.focusLastEditorGroup",
        "when": "sideBarFocus || (!sideBarVisible && !sideBarFocus && activeEditorGroupIndex == 1 && vim.mode != 'Insert')" 
    },
    {
        "key": "ctrl+l",
        "command": "workbench.action.focusRightGroup",
        "when": "editorTextFocus && vim.active && vim.mode != 'Insert'"
    },
    {
        // Special case: when in sidebar, go right (back to 1st open editor group)
        "key": "ctrl+l",
        "command": "workbench.action.focusFirstEditorGroup",
        "when": "sideBarFocus"
    },
    {
        // Special case: when in last editor group, go to sidebar
        "key": "ctrl+l",
        "command": "workbench.action.focusSideBar",
        "when": "editorTextFocus && activeEditorGroupLast && vim.active && vim.mode != 'Insert' && sideBarVisible"
    },
    {
        // Special case: when in last editor group, go to first if sidebar is not visible
        "key": "ctrl+l",
        "command": "workbench.action.focusFirstEditorGroup",
        "when": "editorTextFocus && activeEditorGroupLast && vim.active && vim.mode != 'Insert' && !sideBarVisible"
    },
    {
        "key": "ctrl+shift+h",
        "command": "workbench.action.decreaseViewSize"
    },
    {
        "key": "ctrl+shift+l",
        "command": "workbench.action.increaseViewSize"
    },
// ---------------------------------------------------------------------------------------------------------------------------------
    {
        "key": "enter",
        "command": "-editor.action.nextMatchFindAction",
        "when": "editorFocus && findInputFocussed"
    },
]
